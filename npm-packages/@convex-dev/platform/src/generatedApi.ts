/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_teams_for_member"];
        put?: never;
        post: operations["create_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_projects_for_team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_deployments_for_project"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{deployment_name}/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["get_deployment_auth_dashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create_project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_project_and_provision_deployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["transfer_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delete_project/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["dashboard_delete_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TransferProjectArgs: {
            destinationTeamId: components["schemas"]["TeamId"];
        };
        /** Format: int64 */
        TeamId: number;
        CreateProjectResponse: {
            adminKey: components["schemas"]["AdminKey"];
            deploymentName: string;
            prodUrl: string;
            projectId: components["schemas"]["ProjectId"];
            projectSlug: components["schemas"]["ProjectSlug"];
            /** Format: int64 */
            projectsRemaining: number;
            teamId: components["schemas"]["TeamId"];
            teamSlug: components["schemas"]["TeamSlug"];
        };
        TeamSlug: string;
        ProjectSlug: string;
        /** Format: int64 */
        ProjectId: number;
        /** @description Encrypted admin key */
        AdminKey: string;
        CreateProjectArgs: {
            deploymentType?: null | components["schemas"]["DeploymentType"];
            projectName: components["schemas"]["ProjectName"];
            team: components["schemas"]["TeamSlug"];
        };
        ProjectName: string;
        /** @enum {string} */
        DeploymentType: "dev" | "prod" | "preview";
        InstanceAuthForDashboardInteractionsResponse: {
            adminKey: components["schemas"]["SerializedAccessToken"];
            instanceUrl: string;
            /** @enum {string} */
            kind: "Cloud";
        } | {
            adminKey: components["schemas"]["AdminKey"];
            instanceUrl: string;
            /** @enum {string} */
            kind: "Local";
        };
        /** @description ConvexAccessToken is our own internal notion of authorization.
         *     It is versioned.
         *
         *     V1 - uses an auth0_access_token for authorization.
         *
         *     Serialization is done by SerializedAccessToken::new
         *     The ConvexAccessToken is serialized (json) and base64
         *     encoded for obfuscation before sending it to the client
         *
         *     Deserialization is done by SerializedAccessToken::decode
         *     This reverses the process and returns a ConvexAccessToken which
         *     can be match'd by the extractor.
         *
         *     `SerializedAccessToken` is intentionally the only struct that is
         *     left public.
         *
         *     The json is externally tagged. Expect it to look like
         *     {"v1": "auth0token"} */
        SerializedAccessToken: string;
        DeploymentResponse: {
            /** Format: int64 */
            createTime: number;
            creator: components["schemas"]["MemberId"];
            deploymentType: components["schemas"]["DeploymentType"];
            /** Format: int64 */
            id: number;
            /** @enum {string} */
            kind: "cloud";
            name: string;
            previewIdentifier?: null | components["schemas"]["PreviewDeploymentIdentifier"];
            projectId: components["schemas"]["ProjectId"];
        } | {
            /** Format: int64 */
            createTime: number;
            creator: components["schemas"]["MemberId"];
            deploymentType: components["schemas"]["DeploymentType"];
            deviceName: components["schemas"]["DeviceName"];
            /** Format: int64 */
            id: number;
            isActive: boolean;
            /** @enum {string} */
            kind: "local";
            /** Format: int64 */
            lastUpdateTime: number;
            name: string;
            /** Format: int32 */
            port: number;
            previewIdentifier?: null | components["schemas"]["PreviewDeploymentIdentifier"];
            projectId: components["schemas"]["ProjectId"];
        };
        DeviceName: string;
        PreviewDeploymentIdentifier: string;
        /** Format: int64 */
        MemberId: number;
        ProjectDetails: {
            /** Format: int64 */
            createTime: number;
            id: components["schemas"]["ProjectId"];
            isDemo: boolean;
            name: components["schemas"]["ProjectName"];
            slug: components["schemas"]["ProjectSlug"];
            teamId: components["schemas"]["TeamId"];
        };
        CreateTeamArgs: {
            name: components["schemas"]["ProposedTeamName"];
        };
        ProposedTeamName: string;
        Team: {
            creator?: null | components["schemas"]["MemberId"];
            id: components["schemas"]["TeamId"];
            managedBy?: string | null;
            name: components["schemas"]["TeamName"];
            referralCode: components["schemas"]["ReferralCode"];
            referredBy?: null | components["schemas"]["TeamId"];
            slug: components["schemas"]["TeamSlug"];
            suspended: boolean;
        };
        ReferralCode: string;
        TeamName: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type TransferProjectArgs = components['schemas']['TransferProjectArgs'];
export type TeamId = components['schemas']['TeamId'];
export type CreateProjectResponse = components['schemas']['CreateProjectResponse'];
export type TeamSlug = components['schemas']['TeamSlug'];
export type ProjectSlug = components['schemas']['ProjectSlug'];
export type ProjectId = components['schemas']['ProjectId'];
export type AdminKey = components['schemas']['AdminKey'];
export type CreateProjectArgs = components['schemas']['CreateProjectArgs'];
export type ProjectName = components['schemas']['ProjectName'];
export type DeploymentType = components['schemas']['DeploymentType'];
export type InstanceAuthForDashboardInteractionsResponse = components['schemas']['InstanceAuthForDashboardInteractionsResponse'];
export type SerializedAccessToken = components['schemas']['SerializedAccessToken'];
export type DeploymentResponse = components['schemas']['DeploymentResponse'];
export type DeviceName = components['schemas']['DeviceName'];
export type PreviewDeploymentIdentifier = components['schemas']['PreviewDeploymentIdentifier'];
export type MemberId = components['schemas']['MemberId'];
export type ProjectDetails = components['schemas']['ProjectDetails'];
export type CreateTeamArgs = components['schemas']['CreateTeamArgs'];
export type ProposedTeamName = components['schemas']['ProposedTeamName'];
export type Team = components['schemas']['Team'];
export type ReferralCode = components['schemas']['ReferralCode'];
export type TeamName = components['schemas']['TeamName'];
export type $defs = Record<string, never>;
export interface operations {
    get_teams_for_member: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
        };
    };
    create_team: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTeamArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
        };
    };
    get_projects_for_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetails"][];
                };
            };
        };
    };
    list_deployments_for_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeploymentResponse"][];
                };
            };
        };
    };
    get_deployment_auth_dashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstanceAuthForDashboardInteractionsResponse"];
                };
            };
        };
    };
    create_project_and_provision_deployment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProjectArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateProjectResponse"];
                };
            };
        };
    };
    transfer_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransferProjectArgs"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dashboard_delete_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
