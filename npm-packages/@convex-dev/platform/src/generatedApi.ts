/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/team/{team_id}/create_project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create project
         * @description Create a new project on a team and provision a dev or prod deployment.
         */
        post: operations["create project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/{team_id}/list_projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects
         * @description List all projects for a team.
         */
        get: operations["list projects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{project_id}/list_deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List deployments
         * @description List deployments for a projects.
         */
        get: operations["list deployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{project_id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete project
         * @description Delete a project. Deletes all deployments in the project as well.
         */
        post: operations["delete project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        DeploymentType: "dev" | "prod" | "preview";
        PlatformCreateProjectArgs: {
            /** @description Projects always include a deployment, so start this project off with a
             *     "dev" development deployment or a "prod" production deployment. */
            deploymentType: components["schemas"]["DeploymentType"];
            /** @description The full name of the project as it will appear in the dashboard. Spaces
             *     and punctuations allowed. */
            projectName: components["schemas"]["ProjectName"];
        };
        PlatformCreateProjectResponse: {
            /** @description The readable identifier for this deployment, something like
             *     playful-otter-123. */
            deploymentName: string;
            /** @description Deployment cloud URL, where this deployment lives. */
            deploymentUrl: string;
            projectId: components["schemas"]["ProjectId"];
        };
        PlatformDeploymentResponse: {
            /**
             * Format: int64
             * @description Timestamp in milliseconds when this deployment was created.
             */
            createTime: number;
            /** @description Whether this is a "dev" development deployment or "prod" production
             *     deployment. */
            deploymentType: components["schemas"]["DeploymentType"];
            /** @description The readable identifier for this deployment, something like
             *     playful-otter-123. */
            name: string;
            previewIdentifier?: null | components["schemas"]["PreviewDeploymentIdentifier"];
            /** @description The project this deployment belongs to. */
            projectId: components["schemas"]["ProjectId"];
        };
        PlatformProjectDetails: {
            /**
             * Format: int64
             * @description Timestamp in milliseconds.
             */
            createTime: number;
            id: components["schemas"]["ProjectId"];
            /** @description The full project name, including spaces and punctuation. */
            name: components["schemas"]["ProjectName"];
            /** @description This shortened version of the name used in Convex Dashboard URLs. */
            slug: components["schemas"]["ProjectSlug"];
            teamId: components["schemas"]["TeamId"];
        };
        PreviewDeploymentIdentifier: string;
        /** Format: int64 */
        ProjectId: number;
        ProjectName: string;
        ProjectSlug: string;
        /** Format: int64 */
        TeamId: number;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type DeploymentType = components['schemas']['DeploymentType'];
export type PlatformCreateProjectArgs = components['schemas']['PlatformCreateProjectArgs'];
export type PlatformCreateProjectResponse = components['schemas']['PlatformCreateProjectResponse'];
export type PlatformDeploymentResponse = components['schemas']['PlatformDeploymentResponse'];
export type PlatformProjectDetails = components['schemas']['PlatformProjectDetails'];
export type PreviewDeploymentIdentifier = components['schemas']['PreviewDeploymentIdentifier'];
export type ProjectId = components['schemas']['ProjectId'];
export type ProjectName = components['schemas']['ProjectName'];
export type ProjectSlug = components['schemas']['ProjectSlug'];
export type TeamId = components['schemas']['TeamId'];
export type $defs = Record<string, never>;
export interface operations {
    "create project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                team_id: components["schemas"]["TeamId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlatformCreateProjectArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlatformCreateProjectResponse"];
                };
            };
        };
    };
    "list projects": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                team_id: components["schemas"]["TeamId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlatformProjectDetails"][];
                };
            };
        };
    };
    "list deployments": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                project_id: components["schemas"]["ProjectId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlatformDeploymentResponse"][];
                };
            };
        };
    };
    "delete project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                project_id: components["schemas"]["ProjectId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
