syntax = "proto3";

package backend;

import "common.proto";
import "convex_identity.proto";
import "convex_token.proto";
import "searchlight.proto";
import "storage.proto";
import "usage.proto";

service Backend {
    // Query/mutation RPCs used by Funrun. Performed at a snapshot.
    rpc TextSearchAtTs(TextSearchAtTsRequest) returns (TextSearchAtTsResponse);
    rpc TableCountAtTs(TableCountAtTsRequest) returns (TableCountAtTsResponse);

    // Action RPCs used by Funrun and Usher. Performed as a separate transaction at latest timestamp.
    rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse);
    rpc ExecuteMutation(ExecuteMutationRequest) returns (ExecuteMutationResponse);
    rpc ExecuteAction(ExecuteActionRequest) returns (ExecuteActionResponse);

    rpc StorageGetUrl(StorageGetUrlRequest) returns (StorageGetUrlResponse);
    rpc StorageGetFileEntry(StorageGetFileEntryRequest) returns (StorageGetFileEntryResponse);
    rpc StorageStoreFileEntry(StorageStoreFileEntryRequest) returns (StorageStoreFileEntryResponse);
    rpc StorageDelete(StorageDeleteRequest) returns (StorageDeleteResponse);

    rpc ScheduleJob(ScheduleJobRequest) returns (ScheduleJobResponse);
    rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);

    rpc VectorSearch(VectorSearchRequest) returns (VectorSearchResponse);

    // Used by Usher.
    rpc ExecutePublicQuery(ExecutePublicQueryRequest) returns (ExecutePublicQueryResponse);
    rpc ExecutePublicMutation(ExecutePublicMutationRequest) returns (ExecutePublicMutationResponse);
    rpc ExecutePublicAction(ExecutePublicActionRequest) returns (ExecutePublicActionResponse);
}

// The request header is used by all requests to validate we are talking to the
// correct backend.
message RequestHeader {
    optional string instance_name = 1;
    optional string request_id = 2;
    optional string encoded_parent_trace = 3;
}

// Not validated path and args.
message PathAndArgs {
  optional string path = 1;
  optional bytes args = 2;
}

message RedactedJsError {
    common.JsError error = 1;
    optional bool block_logging = 2;
    optional string request_id = 3;
}

message RedactedLogLines {
  repeated string log_lines = 1;
}

message TextSearchAtTsRequest {
    RequestHeader header = 6;

    optional uint64 ts = 1;
    optional bytes index_id = 2;
    optional searchlight.TextQuery query = 3;
    optional string printable_index_name = 4;
    repeated common.DocumentUpdate pending_updates = 5;
}

message TextSearchAtTsResponse {
    repeated RevisionWithKey revisions_with_keys = 1;
}

message RevisionWithKey {
    optional searchlight.CandidateRevision revision = 1;
    optional bytes key = 2;
}

message TableCountAtTsRequest {
    RequestHeader header = 3;

    optional uint64 ts = 1;
    optional bytes table_id = 2;
}

message TableCountAtTsResponse {
    optional uint64 count = 1;
}

message ExecuteQueryRequest {
    reserved 7;
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    PathAndArgs path_and_args = 3;
    optional common.ExecutionContext execution_context = 6;
}

message ExecuteQueryResponse {
    common.FunctionResult result = 1;
}

// This is a more generic version of ExecuteQueryRequest that can be used
// in both Usher and Funrun.
message ExecutePublicQueryRequest {
    RequestHeader header = 1;

    convex_identity.AuthenticationToken auth_token = 2;
    PathAndArgs path_and_args = 3;

    common.FunctionCaller caller = 4;
}

message ExecutePublicQueryResponse {
    oneof result {
        string json_packed_value = 1;
        RedactedJsError js_error = 2;
    }
    RedactedLogLines log_lines = 3;
}

message ExecuteMutationRequest {
    reserved 4, 7;

    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    PathAndArgs path_and_args = 3;
    optional common.ExecutionContext execution_context = 6;
}

message ExecuteMutationResponse {
    common.FunctionResult result = 1;
}

// This is a more generic version of ExecuteQueryRequest that can be used
// in both Usher and Funrun.
message ExecutePublicMutationRequest {
    RequestHeader header = 1;

    convex_identity.AuthenticationToken auth_token = 2;
    PathAndArgs path_and_args = 3;

    common.FunctionCaller caller = 4;
}

message MutationSuccess {
    optional string json_packed_value = 1;
    optional uint64 commit_ts = 2;
}

message ExecutePublicMutationResponse {
    oneof result {
        MutationSuccess success = 1;
        RedactedJsError js_error = 2;
    }
    RedactedLogLines log_lines = 3;
}

message ExecuteActionRequest {
    reserved 4, 7;

    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    PathAndArgs path_and_args = 3;
    optional common.ExecutionContext execution_context = 6;
}

message ExecuteActionResponse {
    common.FunctionResult result = 1;
}

// This is a more generic version of ExecuteQueryRequest that can be used
// in both Usher and Funrun.
message ExecutePublicActionRequest {
    RequestHeader header = 1;

    convex_identity.AuthenticationToken auth_token = 2;
    PathAndArgs path_and_args = 3;

    common.FunctionCaller caller = 4;
}

message ExecutePublicActionResponse {
    oneof result {
        string json_packed_value = 1;
        RedactedJsError js_error = 2;
    }
    RedactedLogLines log_lines = 3;
}

message StorageGetUrlRequest {
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    storage.FileStorageId storage_id = 3;
}

message StorageGetUrlResponse {
    optional string url = 1;
}

message StorageGetFileEntryRequest {
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    storage.FileStorageId storage_id = 3;
}

message StorageGetFileEntryResponse {
    storage.FileStorageEntry entry = 1;
}

message StorageStoreFileEntryRequest {
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    storage.FileStorageEntry entry = 3;
}

message StorageStoreFileEntryResponse {
    optional string document_id = 1;
}

message StorageDeleteRequest {
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    storage.FileStorageId storage_id = 3;
}

message StorageDeleteResponse {
}

message ScheduleJobRequest {
    reserved 5;
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    PathAndArgs path_and_args = 3;
    optional double scheduled_ts = 4;
    optional common.ExecutionContext execution_context = 6;
}

message ScheduleJobResponse {
    optional string id = 1;
}

message CancelJobRequest {
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    optional string id = 3;
}

message CancelJobResponse {
}

message VectorSearchRequest {
    RequestHeader header = 1;

    convex_identity.UncheckedIdentity identity = 2;
    optional bytes query_json = 3;
}

message VectorSearchResponse {
    repeated PublicVectorQueryResult results = 1;
    usage.FunctionUsageStats usage_stats = 2;
}

message PublicVectorQueryResult {
  optional float score = 1;
  optional string document_id = 2;
}
