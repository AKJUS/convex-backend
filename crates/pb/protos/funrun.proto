syntax = "proto3";

import "convex_cursor.proto";
import "convex_token.proto";
import "google/protobuf/empty.proto";
import "convex_identity.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "common.proto";
import "usage.proto";

package funrun;

service Funrun {
  // Runs a function without performing an authoritative retention check.
  // The client is responsible for performing this check.
  rpc RunFunctionNoRetentionCheck(FunrunRequest) returns (stream FunrunResponse);
}

message FunrunRequest {
  reserved 9;

  // Backend related fields.
  optional string instance_name = 1;
  optional bytes instance_secret = 2;
  optional string db_cluster_name = 3;
  optional string convex_origin = 11;
  optional string backend_grpc_addr = 12;

  // Request specific fields.
  common.ValidatedPathAndArgs path_and_args = 4;
  UdfType udf_type = 5;
  convex_identity.UncheckedIdentity identity = 6;
  Writes existing_writes = 17;
  reserved 7;
  QueryJournal journal = 8;

  map<string, string> system_env_vars = 10;
  repeated InMemoryIndexLastModified in_memory_index_last_modified = 13; 
  BootstrapMetadata bootstrap_metadata = 14;
  optional common.ExecutionContext context = 15;
  RepeatableTimestamp repeatable_ts = 16;
  
  // Encoded parent trace
  optional string encoded_parent_trace = 18;
}

// Only construct this via
// `impl From<RepeatableTimestamp> for RepeatableTimestampProto`
// to guarantee validation. When deserializing, we assume it was serialized
// from a valid RepeatableTimestamp, and we can use it for reading from the
// persistence leader (not necessarily the follower).
message RepeatableTimestamp {
  optional uint64 ts = 1;
}


message BootstrapMetadata {
  optional bytes tables_by_id = 1;
  optional bytes index_by_id = 2;
  optional bytes tables_table_id = 3;
  optional bytes index_table_id = 4;
}

enum UdfType {
  QUERY = 0;
  MUTATION = 1;
  ACTION = 2;
  HTTP_ACTION = 3;
}

message InMemoryIndexLastModified {
  optional bytes index_id = 1;
  optional google.protobuf.Timestamp last_modified = 2;
}

message FunctionCompleteResponse {
  FunrunFinalTransaction transaction = 1;
  FunctionOutcome function_outcome = 2;
  usage.FunctionUsageStats usage_stats = 3;
}

message LogLineResponse {
  repeated LogLine log_lines = 1;
}

message FunrunResponse {
  reserved 1;
  reserved 2;
  reserved 3;
  oneof inner {
    LogLineResponse log_lines = 4;
    FunctionCompleteResponse function_complete = 5;
  }
}

message FunrunFinalTransaction {
  optional google.protobuf.Timestamp begin_timestamp = 1;
  FunrunReads reads = 2;
  Writes writes = 3;
  map<uint32, uint64> rows_read = 4;
}

message FunrunReads {
  ReadSet reads = 1;
  optional uint64 num_intervals = 2;
  TransactionSize user_tx_size = 3;
  TransactionSize system_tx_size = 4;
}

message TransactionSize {
  optional uint64 total_document_size = 1;
  optional uint64 total_document_count = 2;
}

message ReadSet {
  repeated IndexReads indexed = 1;
  repeated SearchQueryReads search = 2;
}

message IndexReads {
  convex_token.ResolvedIndexName index_name = 1;
  repeated convex_token.FieldPath fields = 2;
  repeated convex_token.Interval intervals = 3;
  // Ignore stack trace for now
}


message SearchQueryReads {
  convex_token.ResolvedIndexName index_name = 1;
  repeated convex_token.SearchTextQueryTerm text_queries = 2;
  repeated FilterConditionRead filter_conditions = 3;
}

message FilterConditionRead {
  convex_token.FieldPath field_path = 1;
  optional bytes filter_value = 2;
}

message Writes {
  repeated common.DocumentUpdate updates = 1;
  repeated common.ResolvedDocumentId generated_ids = 2;
}

message DocInVectorIndex {
  oneof doc_in_vector_index {
    google.protobuf.Empty present = 1;
    google.protobuf.Empty absent = 2;
  }
}

message SystemLogMetadata {
  string code = 1;
}

message StructuredLogLine {
    reserved 1;
    string level = 2;
    bool is_truncated = 3;
    google.protobuf.Timestamp timestamp = 4;
    optional SystemLogMetadata system_metadata = 5;
    repeated string messages = 6;

}

message LogLine {
    oneof line {
        string unstructured = 1;
        StructuredLogLine structured = 2;
    }
}

message FunctionOutcome {
  oneof outcome {
    UdfOutcome query = 1;
    UdfOutcome mutation = 2;
    ActionOutcome action = 3;
  }
}

message UdfOutcome {
  optional bytes rng_seed = 1;
  optional bool observed_rng = 2;

  optional google.protobuf.Timestamp unix_timestamp = 3;
  optional bool observed_time = 4;

  reserved 5;
  repeated LogLine log_lines = 9;
  QueryJournal journal = 6;

  common.FunctionResult result = 7;
  SyscallTrace syscall_trace = 8;
}

message ActionOutcome {
  optional google.protobuf.Timestamp unix_timestamp = 3;

  reserved 5;
  reserved 9;

  common.FunctionResult result = 7;
  SyscallTrace syscall_trace = 8;
}

message QueryJournal {
  optional Cursor cursor = 1;
}

message Cursor {
  oneof position {
    convex_cursor.IndexKey after = 1;
    google.protobuf.Empty end = 2;
  }
  optional bytes query_fingerprint = 3;
}

message SyscallTrace {
  map<string, SyscallStats> async_syscalls = 1;
}
message SyscallStats {
  optional uint32 invocations = 1;
  optional uint32 errors = 2;
  optional google.protobuf.Duration total_duration = 3;
}