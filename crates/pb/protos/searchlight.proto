syntax = "proto3";

import "common.proto";
import "google/protobuf/empty.proto";

package searchlight;

service Searchlight {
  rpc ExecuteQuery(QueryRequest) returns (QueryResponse);
  rpc ExecuteVectorQuery(VectorQueryRequest) returns (VectorQueryResponse);
  rpc ExecuteVectorCompaction(VectorCompactionRequest) returns (VectorCompactionResponse);
  rpc QueueVectorPrefetch(VectorPrefetchRequest) returns (VectorPrefetchResponse);

  rpc NumberOfSegments(SegmentRequest) returns (SegmentResponse);
  rpc SegmentTermMetadata(SegmentTermMetadataRequest) returns (SegmentTermMetadataResponse);

  // Query a set of tokens against the term dictionary, optionally allowing
  // for fuzzy matching and prefix matching. Take the top `K` results with
  // respect to to `(edit distance, term)` lexicographical order.
  rpc QueryTokens(QueryTokensRequest) returns (QueryTokensResponse);

  // For the given index, compute the total number of documents and terms
  // in the index. Also, given a list of pointers to terms within the index,
  // compute the document frequency of each term.
  rpc QueryBm25Stats(QueryBm25StatsRequest) returns (QueryBm25StatsResponse);

  // Given a AND + OR query of term pointers and BM25 statistics for the OR
  // terms, return the top `K` results with respect to BM25 score.
  rpc QueryPostingLists(QueryPostingListsRequest) returns (QueryPostingListsResponse);

  // Given a set of text segments in a particular text index, merge them into a single segment, upload it and
  // return pointers to the new segment.
  rpc ExecuteTextCompaction(TextCompactionRequest) returns (TextCompactionResponse);
}

message QueryRequest {
  SearchIndexConfig index_config = 2;
  TextQuery query = 3;
  Bm25StatisticsDiff memory_statistics_diff = 4;
  TermShortlist memory_shortlisted_terms = 5;
  uint32 limit = 6;
  StorageKey disk_index = 7;
  StorageType storage_type = 8;
}

message TextQuery {
  repeated TextQueryTerm search_terms = 1;
  repeated bytes filter_conditions = 2;
}

message TextQueryTerm {
  oneof term_type {
     ExactTextTerm exact = 1;
     FuzzyTextTerm fuzzy = 2;
  }
}

message ExactTextTerm {
  string token = 1;
}

message FuzzyTextTerm {
  string token = 1;
  uint32 max_distance = 2;
  bool prefix = 3;
}

message Bm25StatisticsDiff {
  map<string, int64> term_statistics = 1;
  int64 num_documents_diff = 2;
  int64 num_search_tokens_diff = 3;
}

message TermShortlist {
  repeated string shortlist = 1;
  repeated QueryTermShortlistItems query_term_shortlist_items = 2;
}

message QueryTermShortlistItems {
  TextQueryTerm query_term = 1;
  repeated ShortlistItem items = 2;
}

message ShortlistItem {
  uint32 shortlist_id = 1;
  uint32 distance = 2;
}

message QueryResponse {
  repeated CandidateRevisionPositions results = 1;
  Bm25StatisticsDiff combined_statistics = 2;
  TermShortlist combined_shortlisted_terms = 3;
}

message CandidateRevisionPositions {
  CandidateRevision revision = 1;
  repeated ShortlistPositions positions = 2;
}

message ShortlistPositions {
  uint32 shortlist_id = 1;
  repeated uint32 positions = 2;
}

message SearchIndexConfig {
  common.FieldPath search_field_path = 1;
  repeated common.FieldPath filter_fields = 2;
}

message FilterField {
  common.FieldPath path = 1;
  uint32 field = 2;
}

message CandidateRevision {
  float score = 1;
  reserved 3;
  optional uint64 ts = 4;
  double creation_time = 5;
  bytes internal_id = 6;
}


message TextCompactionRequest {
   repeated FragmentedTextSegmentPaths segments = 1;
   StorageType storage_type = 2;
}

message FragmentedTextSegment {
  StorageKey segment = 1;
  StorageKey id_tracker = 2;
  StorageKey deleted_terms_table = 3;
  StorageKey alive_bitset = 4;
  uint64 num_indexed_documents = 5;
  uint64 num_deleted_documents = 6;
  uint64 size_bytes_total = 7;
  string id = 8;
}

message TextCompactionResponse {
    FragmentedTextSegment segment = 1;
}

// Next field id: 6
message VectorQueryRequest {
  reserved 1;
  VectorIndexConfig index_config = 2;
  CompiledVectorQuery query = 3;
  uint32 overfetch_delta = 4;
  FragmentedVectorSegmentPathsList segments = 5;
  StorageType storage_type = 6;
}

message VectorPrefetchRequest {
  FragmentedVectorSegmentPathsList segments = 1;
  StorageType storage_type = 2;
}

message VectorPrefetchResponse {}

message VectorCompactionRequest {
  FragmentedVectorSegmentPathsList segments = 1;
  uint32 dimension = 2;
  StorageType storage_type = 3;
}

message VectorCompactionResponse {
  FragmentedVectorSegment segment = 1;
}

message VectorIndexConfig {
  uint32 dimension = 1;
  common.FieldPath vector_field_path = 2;
  repeated common.FieldPath filter_fields = 3;
}

message CompiledVectorQuery {
  repeated float vector = 1;
  uint32 limit = 2;
  repeated CompiledVectorQueryFilterCondition filter_conditions = 3;
}

message CompiledVectorQueryFilterCondition {
  common.FieldPath path = 1;
  oneof filter {
    bytes eq_condition = 2;
    CompiledVectorQueryFilterInCondition in_condition = 3;
  }
}

message CompiledVectorQueryFilterInCondition {
  repeated bytes eq_conditions = 1;
}

message VectorQueryResponse {
  repeated VectorQueryResult results = 1;
}

message VectorQueryResult {
  float score = 1;
  bytes internal_id = 2;
  optional uint64 ts = 3;
}

// oneof doesn't support repeated fields without nesting.
message FragmentedVectorSegmentPathsList {
  repeated FragmentedVectorSegmentPaths segments = 2;
}

message FragmentedVectorSegmentPaths {
  StorageKey segment = 1;
  StorageKey id_tracker = 2;
  StorageKey deleted_bitset = 3;
}

message FragmentedVectorSegment {
  string segment_key = 1;
  string id_tracker_key = 2;
  string deleted_bitset_key = 3;
  uint32 num_vectors = 4;
  uint32 num_deleted = 5;
  string id = 6;
}

message StorageKey {
  string storage_key = 1;
}

message S3Storage {
  string prefix = 1;
  string bucket = 2;
}

message LocalStorage {
  string path = 1;
}

message StorageType {
  oneof storage_type {
    S3Storage s3 = 1;
    LocalStorage local = 2;
  }
}

message SegmentRequest {
    StorageKey segment = 1;
    StorageType storage_type = 2;
}

message SegmentResponse {
    uint32 number_of_segments = 1;
}

message SegmentTermMetadataRequest {
  StorageType storage_type = 1;
  StorageKey segment = 2;
  repeated FieldTermDeletions field_term_deletions = 3;
}

message FieldTermDeletions {
  optional uint32 field = 1;
  repeated TermValueDeleteCount term_values_and_delete_counts = 2;
}

message TermValueDeleteCount {
  optional bytes term_value = 1;
  optional uint32 num_docs_deleted = 2;
}

message SegmentTermMetadataResponse {
  repeated FieldTermMetadata field_term_metadata = 1;
}

message FieldTermMetadata {
  optional uint32 field = 1;
  repeated TermOrdDeleteCount term_ords_and_delete_counts = 2;
  optional uint64 num_terms_deleted = 3;
}

message TermOrdDeleteCount {
  optional uint64 term_ord = 1;
  optional uint32 num_docs_deleted = 2;
}

message QueryTokensRequest {
  StorageType storage_type = 1;
  FragmentedTextSegmentPaths segment = 2;
  repeated TokenQuery token_queries = 3;
  uint32 max_results = 4;
}

message FragmentedTextSegmentPaths {
  StorageKey segment = 1;
  oneof segment_metadata {
    SingleSegmentMetadata single_segment = 2;
    MultiSegmentMetadata multi_segment = 3;
  }
}

message SingleSegmentMetadata {
   optional uint32 segment_ord = 1;
}

message MultiSegmentMetadata {
  StorageKey id_tracker = 1;
  StorageKey deleted_terms_table = 2;
  StorageKey alive_bitset = 3;
}

message TokenQuery {
  bytes term = 1;
  uint32 max_distance = 2;
  bool prefix = 3;
}

message QueryTokensResponse {
  repeated TokenMatch token_matches = 2;
}

message TokenMatch {
  uint32 distance = 1;
  bool prefix = 2;
  bytes tantivy_bytes = 3;
  // Offset into `QueryTokensRequest.token_queries`.
  uint32 token_ord = 4;
}

message QueryBm25StatsRequest {
  StorageType storage_type = 1;
  FragmentedTextSegmentPaths segment = 2;
  repeated bytes terms = 3;
}

message QueryBm25StatsResponse {
  repeated NumTermsByField num_terms_by_field = 1;
  uint64 num_documents = 2;
  repeated DocFrequency doc_frequencies = 3;
}

message NumTermsByField {
  optional uint32 field = 1;
  optional uint64 num_terms = 2;
}

message DocFrequency {
  bytes term = 1;
  uint64 frequency = 2;
}

message QueryPostingListsRequest {
  StorageType storage_type = 1;
  FragmentedTextSegmentPaths segment = 2;
  PostingListQuery query = 3;
}

message PostingListQuery {
  repeated bytes deleted_internal_ids = 1;

  // Global BM25 stats
  repeated NumTermsByField num_terms_by_field = 2;
  uint64 num_documents = 3;

  repeated OrTerm or_terms = 4;
  repeated bytes and_terms = 5;

  uint32 max_results = 6;
}

message OrTerm {
  bytes term = 1;
  uint64 doc_frequency = 2;
  float bm25_boost = 3;
}

message QueryPostingListsResponse {
  repeated PostingListMatch matches = 1;
}

message PostingListMatch {
  bytes internal_id = 1;
  oneof ts {
    uint64 committed = 2;
    google.protobuf.Empty pending = 3;
  }
  double creation_time = 4;
  float bm25_score = 5;
}
